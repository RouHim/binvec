name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: |
          sudo apt update && sudo apt install -y libgtk-4-dev build-essential

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: |
          sudo apt update && sudo apt install -y libgtk-4-dev build-essential

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Test code
        run: cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: |
          sudo apt update && sudo apt install -y libgtk-4-dev build-essential

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps

  build-linux-bin:
    name: Build linux executable
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: |
          sudo apt update && sudo apt install -y libgtk-4-dev build-essential

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Build application
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/binvec ./binvec-x86_64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: binvec-x86_64-unknown-linux-gnu

  build-windows-bin:
    name: Build windows executable
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0} # Set the msys2 shell as default, so all command will be executed in msys2 environment.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare GTK4 build env
        uses: msys2/setup-msys2@v2
        with:
          update: false # don't update the MSYS2 repository, it takes too long
          path-type: inherit
          install: >-
            mingw-w64-x86_64-gtk4
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-gcc
            zip

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          target: x86_64-pc-windows-gnu

      - name: Switch to gnu rust toolchain
        run: |
          rustup toolchain install stable-gnu
          rustup default stable-gnu

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Build application
        run: |
          cargo build --release --target x86_64-pc-windows-gnu
          mkdir distribution
          cp target/x86_64-pc-windows-gnu/release/binvec.exe distribution/binvec-x86_64-pc-windows-gnu.exe

      - name: Copy gtk4 required dependencies
        run: |
          cp %MSYS2_ROOT%\msys64\mingw64\bin\ *.dll distribution

      - name: Zip distribution package
        run: |
          zip -r binvec-x86_64-pc-windows-gnu.zip distribution

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-gnu.exe
          path: binvec-x86_64-pc-windows-gnu.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-gnu.zip
          path: binvec-x86_64-pc-windows-gnu.zip

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-22.04
    needs: [ build-linux-bin, build-windows-bin ]
    if: github.ref_name == 'main' # only publish if the branch is main
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download previous built linux binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: .

      - name: Download previous built windows binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-gnu.exe
          path: .

      - name: Download previous built windows binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-gnu.zip
          path: .

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release 1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload x86_64-unknown-linux-gnu asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binvec-x86_64-unknown-linux-gnu
          asset_name: binvec-x86_64-unknown-linux-gnu
          asset_content_type: application/x-executable

      - name: Upload x86_64-pc-windows-gnu asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binvec-x86_64-pc-windows-gnu.exe
          asset_name: binvec-x86_64-pc-windows-gnu.exe
          asset_content_type: application/x-executable

      - name: Upload x86_64-pc-windows-gnu asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binvec-x86_64-pc-windows-gnu.zip
          asset_name: binvec-x86_64-pc-windows-gnu.zip
          asset_content_type: application/zip

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}