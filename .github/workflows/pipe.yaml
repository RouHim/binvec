name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Check the code style
        run: cd src-tauri && cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Verify code
        run: cd src-tauri && cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    env:
      BIGDATA_CLOUD_API_KEY: ${{ secrets.BIGDATA_CLOUD_API_KEY }}
      OPEN_WEATHER_MAP_API_KEY: ${{ secrets.OPEN_WEATHER_MAP_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Test code
        run: cd src-tauri && cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cd src-tauri && cargo +nightly udeps

  build:
    needs: [ check-repo, check-code-style, check-code, test ]
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Set release version
        if: matrix.platform != 'windows-latest'
        run: |
          cargo install sd
          sd '"version": "0.0.0"' '"version": "1.0.${{ github.run_number }}"' src-tauri/tauri.conf.json
          echo "Version is now: 1.0.${{ github.run_number }}"

      - name: Install Tauri dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install Tauri-CLI
        run: cargo install tauri-cli

      - name: Build the app
        run: cargo tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            src-tauri/target/release/bundle/macos/BinVec.app
            src-tauri/target/release/bundle/dmg/BinVec_1.0.${{ github.run_number }}_x64.dmg
            src-tauri/target/release/bundle/deb/bin-vec_1.0.${{ github.run_number }}_amd64.deb
            src-tauri/target/release/bundle/appimage/bin-vec_1.0.${{ github.run_number }}_amd64.AppImage
            src-tauri/target/release/bundle/msi/BinVec_1.0.${{ github.run_number }}_x64_en-US.msi  

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref_name == 'main' # only publish if the branch is main
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download previous built application
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: .

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release 1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload appimage asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: appimage/bin-vec_1.0.${{ github.run_number }}_amd64.AppImage
          asset_name: binvec_1.0.${{ github.run_number }}.AppImage
          asset_content_type: application/x-executable

      - name: Upload deb asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deb/bin-vec_1.0.${{ github.run_number }}_amd64.deb
          asset_name: binvec_1.0.${{ github.run_number }}.deb
          asset_content_type: application/x-deb

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
