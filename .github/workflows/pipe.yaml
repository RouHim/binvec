name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Check the code style
        run: cd src-tauri && cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Verify code
        run: cd src-tauri && cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    env:
      BIGDATA_CLOUD_API_KEY: ${{ secrets.BIGDATA_CLOUD_API_KEY }}
      OPEN_WEATHER_MAP_API_KEY: ${{ secrets.OPEN_WEATHER_MAP_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Test code
        run: cd src-tauri && cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cd src-tauri && cargo +nightly udeps

  build:
    needs: [ check-repo, check-code-style, check-code, test ]
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Set release version
        run: |
          cargo install sd
          cd src-tauri
          sd --preview '"version": "0.0.0"' '"version": "1.0.${{ github.run_number }}"' tauri.conf.json
          sd '"version": "0.0.0"' '"version": "1.0.${{ github.run_number }}"' tauri.conf.json
          cd ..
          echo "Version is now: 1.0.${{ github.run_number }}"

      - name: Install Tauri dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install Tauri-CLI
        run: cargo install tauri-cli

      - name: Build the app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: cargo tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            src-tauri/target/release/bundle/macos/BinVec.app
            src-tauri/target/release/bundle/macos/BinVec.app.tar.gz
            src-tauri/target/release/bundle/macos/BinVec.app.tar.gz.sig
            src-tauri/target/release/bundle/appimage/bin-vec_1.0.${{ github.run_number }}_amd64.AppImage
            src-tauri/target/release/bundle/appimage/bin-vec_1.0.${{ github.run_number }}_amd64.AppImage.tar.gz
            src-tauri/target/release/bundle/appimage/bin-vec_1.0.${{ github.run_number }}_amd64.AppImage.tar.gz.sig
            src-tauri/target/release/bundle/msi/BinVec_1.0.${{ github.run_number }}_x64_en-US.msi
            src-tauri/target/release/bundle/msi/BinVec_1.0.${{ github.run_number }}_x64_en-US.msi.zip
            src-tauri/target/release/bundle/msi/BinVec_1.0.${{ github.run_number }}_x64_en-US.msi.zip.sig

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref_name == 'main' # only publish if the branch is main
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download previous built application
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: .

      - name: Prepare release artifacts
        run: |
          mkdir release-artifacts
          export VERSION=1.0.${{ github.run_number }}
          
          mv "./macos/BinVec.app" "release-artifacts/BinVec_${VERSION}.app"
          mv "./macos/BinVec.app.tar.gz" "release-artifacts/BinVec_${VERSION}.app.tar.gz"
          mv "./macos/BinVec.app.tar.gz.sig" "release-artifacts/BinVec_${VERSION}.app.tar.gz.sig"
          
          mv "./appimage/bin-vec_${VERSION}_amd64.AppImage" "release-artifacts/BinVec_${VERSION}.AppImage"
          mv "./appimage/bin-vec_${VERSION}_amd64.AppImage.tar.gz" "release-artifacts/BinVec_${VERSION}.AppImage.tar.gz"
          mv "./appimage/bin-vec_${VERSION}_amd64.AppImage.tar.gz.sig" "release-artifacts/BinVec_${VERSION}.AppImage.tar.gz.sig"
          
          mv "./msi/BinVec_${VERSION}_x64_en-US.msi" "release-artifacts/BinVec_${VERSION}.msi"
          mv "./msi/BinVec_${VERSION}_x64_en-US.msi.tar.gz" "release-artifacts/BinVec_${VERSION}.msi.tar.gz"
          mv "./msi/BinVec_${VERSION}_x64_en-US.msi.tar.gz.sig" "release-artifacts/BinVec_${VERSION}.msi.tar.gz.sig"

      - name: Patch updater json
        run: |
          apt update && apt install -y jq
          export VERSION=1.0.${{ github.run_number }}
          export NOW=$(date +"%Y-%m-%d %k:%M")
          export NOTES=${{ github.event.head_commit.message }}
          
          export MACOS_URL=https://github.com/RouHim/binvec/releases/download/v$VERSION/BinVec_$VERSION.app.tar.gz
          export MACOS_SIG=$(cat release-artifacts/BinVec_$VERSION.app.tar.gz.sig)
          
          export APPIMAGE_URL=https://github.com/RouHim/binvec/releases/download/v$VERSION/BinVec_$VERSION.AppImage.tar.gz
          export APPIMAGE_SIG=$(cat release-artifacts/BinVec_$VERSION.AppImage.tar.gz.sig)
          
          export MSI_URL=https://github.com/RouHim/binvec/releases/download/v$VERSION/BinVec_$VERSION.msi.tar.gz
          export MSI_SIG=$(cat release-artifacts/BinVec_$VERSION.msi.tar.gz.sig)
          
          cat <<< $(jq --arg VERSION "$VERSION" '.version = "\($VERSION)"' binvec_update.json) > binvec_update.json
          cat <<< $(jq --arg NOTES "$NOTES" '.notes = "]\($NOTES)"' binvec_update.json) > binvec_update.json
          cat <<< $(jq --arg NOW "NOW" '.pub_date = "\(NOW)"' binvec_update.json) > binvec_update.json
          
          cat <<< $(jq --arg MACOS_URL "$MACOS_URL" '.platforms."darwin-x86_64".url = "\($MACOS_URL)"' binvec_update.json) > binvec_update.json
          cat <<< $(jq --arg MACOS_SIG "$MACOS_SIG" '.platforms."darwin-x86_64".signature = "\($MACOS_SIG)"' binvec_update.json) > binvec_update.json
          
          cat <<< $(jq --arg APPIMAGE_URL "$APPIMAGE_URL" '.platforms."darwin-x86_64".url = "\($APPIMAGE_URL)"' binvec_update.json) > binvec_update.json
          cat <<< $(jq --arg APPIMAGE_SIG "$APPIMAGE_SIG" '.platforms."darwin-x86_64".signature = "\($APPIMAGE_SIG)"' binvec_update.json) > binvec_update.json
          
          cat <<< $(jq --arg MSI_URL "$MSI_URL" '.platforms."darwin-x86_64".url = "\($MSI_URL)"' binvec_update.json) > binvec_update.json
          cat <<< $(jq --arg MSI_SIG "$MSI_SIG" '.platforms."darwin-x86_64".signature = "\($MSI_SIG)"' binvec_update.json) > binvec_update.json

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release 1.0.${{ github.run_number }}
          tag_name: 1.0.${{ github.run_number }}
          files: |
            release-artifacts/BinVec_1.0.${{ github.run_number }}.app
            release-artifacts/BinVec_1.0.${{ github.run_number }}.app.tar.gz
            release-artifacts/BinVec_1.0.${{ github.run_number }}.app.tar.gz.sig
            release-artifacts/BinVec_1.0.${{ github.run_number }}.AppImage
            release-artifacts/BinVec_1.0.${{ github.run_number }}.AppImage.tar.gz
            release-artifacts/BinVec_1.0.${{ github.run_number }}.AppImage.tar.gz.sig
            release-artifacts/BinVec_1.0.${{ github.run_number }}.msi
            release-artifacts/BinVec_1.0.${{ github.run_number }}.msi.tar.gz
            release-artifacts/BinVec_1.0.${{ github.run_number }}.msi.tar.gz.sig

      - name: Deploy update information to gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: 6dd4931683170f25859dc88cb1788b10
          file_path: binvec_update.json